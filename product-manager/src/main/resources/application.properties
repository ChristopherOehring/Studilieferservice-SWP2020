server.port = 8060

spring.thymeleaf.mode= HTML
spring.thymeleaf.cache= true

# STUFF BELOW NEEDS TO BE REVISED

# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
spring.jpa.database=POSTGRESQL
spring.datasource.url=jdbc:postgresql://db:5432/productmanager
spring.datasource.username=db_user
spring.datasource.password=db_pwd
# spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# Keep the connection alive if idle for a long time (needed in production)
# spring.datasource.testWhileIdle=true
# spring.datasource.validationQuery=SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application (CHANGED TO "UPDATE")
# spring.jpa.hibernate.ddl-auto=create-drop

# ===============================
# = KAFKA
# ===============================
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.consumer.enable-auto-commit=false
spring.kafka.consumer.key-deserializer= org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer= org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.auto-offset-reset= earliest

spring.kafka.producer.key-serializer= org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer= org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.acks= all
spring.kafka.listener.ack-mode= manual


